{
    "Deployments": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: my-container\n          image: my-image\n",
    "StatefulSets": "apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-statefulset\nspec:\n  serviceName: \"my-service\"\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: my-container\n          image: my-image\n",
    "DaemonSets": "apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: my-daemonset\nspec:\n  selector:\n    matchLabels:\n      name: my-daemonset\n  template:\n    metadata:\n      labels:\n        name: my-daemonset\n    spec:\n      containers:\n        - name: my-container\n          image: my-image\n",
    "Services": "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: my-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n",
    "Ingresses": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\nspec:\n  rules:\n    - host: my-app.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: my-service\n                port:\n                  number: 80\n",
    "PersistentVolumes": "apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: my-pv\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /mnt/data\n",
    "PersistentVolumeClaims": "apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: my-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n",
    "ConfigMaps": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\ndata:\n  key1: value1\n  key2: value2\n",
    "Secrets": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: my-secret\ntype: Opaque\ndata:\n  password: cGFzc3dvcmQ=  # base64 encoded password\n",
    "Nodes": "apiVersion: v1\nkind: Node\nmetadata:\n  name: my-node\nspec:\n  capacity:\n    cpu: \"2\"\n    memory: \"4Gi\"\n",
    "Namespaces": "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: my-namespace\n",
    "ResourceQuotas": "apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: my-quota\nspec:\n  hard:\n    requests.cpu: \"2\"\n    requests.memory: 2Gi\n    limits.cpu: \"4\"\n    limits.memory: 4Gi\n",
    "PodDisruptionBudgets": "apiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: my-pdb\nspec:\n  minAvailable: 1\n  selector:\n    matchLabels:\n      app: my-app\n",
    "Events": "apiVersion: v1\nkind: Event\nmetadata:\n  name: my-event\ninvolvedObject:\n  kind: Pod\n  name: my-pod\n  namespace: default\nreason: Scheduled\nmessage: Successfully assigned default/my-pod to my-node\n",
    "Jobs": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: my-job\nspec:\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: my-job-container\n          image: my-job-image\n          command: [\"sh\", \"-c\", \"echo Hello, Kubernetes! && sleep 30\"]\n      restartPolicy: OnFailure\n",
    "CronJobs": "apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: my-cronjob\nspec:\n  schedule: \"0 0 * * *\"  # Runs at midnight every day\n  jobTemplate:\n    spec:\n      template:\n        metadata:\n          labels:\n            app: my-cronjob\n        spec:\n          containers:\n            - name: my-cronjob-container\n              image: my-cronjob-image\n              command: [\"sh\", \"-c\", \"echo Hello, Kubernetes!\"]\n          restartPolicy: OnFailure\n",
    "ReplicaSets": "apiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: my-replicaset\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: my-container\n          image: my-image\n          ports:\n            - containerPort: 80\n",
    "NetworkPolicies": "apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: my-networkpolicy\nspec:\n  podSelector:\n    matchLabels:\n      app: my-app\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              app: other-app\n      ports:\n        - protocol: TCP\n          port: 80\n  egress:\n    - to:\n        - podSelector:\n            matchLabels:\n              app: another-app\n      ports:\n        - protocol: TCP\n          port: 443\n",
    "StorageClasses": "apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: my-storageclass\nprovisioner: kubernetes.io/aws-ebs  # Example for AWS EBS\nparameters:\n  type: gp2\nreclaimPolicy: Retain\nvolumeBindingMode: WaitForFirstConsumer\n"
  }
  